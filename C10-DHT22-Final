#include <WiFiManager.h>               // WiFi Manager for handling WiFi connections
#include <Wire.h>                      // I2C library for OLED
#include <Adafruit_GFX.h>              // Graphics library for OLED
#include <Adafruit_SSD1306.h>          // OLED display driver
#include <DHT.h>                       // DHT22 library
#include <SPIFFS.h>                    // SPIFFS for file system
#include <ESPAsyncWebServer.h>         // Web server library

// Pin Definitions
#define DHTPIN 2                       // Pin connected to DHT22 data
#define DHTTYPE DHT22                  // DHT22 sensor

// OLED Display Config
#define SCREEN_WIDTH 128               // OLED display width
#define SCREEN_HEIGHT 64               // OLED display height
#define OLED_RESET -1                  // OLED reset pin (if needed)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// DHT Sensor
DHT dht(DHTPIN, DHTTYPE);

// Timer for refreshing data
unsigned long lastRefresh = 0;
const long refreshInterval = 2000;     // Refresh interval in milliseconds (2 seconds)

// Async Web Server on port 80
AsyncWebServer server(80);

// Global variables for sensor data
float temperature = 0.0;
float humidity = 0.0;

void setup() {
  Serial.begin(9600);

  // Initialize OLED display
    if(!display.begin(SSD1306_PAGEADDR, 0x3C)) {  // Change 0x3C to your display's I2C address if different
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);  // Infinite loop if display initialization fails

    }

  display.clearDisplay();
  display.display();

  // Initialize DHT22
  dht.begin();

  // Initialize SPIFFS
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS Mount Failed");
    return;
  }

  // Show "Connecting to WiFi" on OLED
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println("Connecting to WiFi...");
  display.display();

  // Initialize WiFi Manager and store WiFi credentials in SPIFFS
  WiFiManager wifiManager;
  wifiManager.setSaveConfigCallback(saveConfigCallback);

  // Automatically connect to the last known network, or start a WiFi AP
  if (!wifiManager.autoConnect("WILSON-ESP32-AP")) {
    Serial.println("Failed to connect to WiFi");
    ESP.restart();
  }

  // If connected, show success and IP address on OLED
  String ipAddress = WiFi.localIP().toString();
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("WiFi Connected");
  display.setCursor(0, 16);
  display.println("IP Address:");
  display.setCursor(0, 32);
  display.println(ipAddress);
  display.display();
  delay(3000);  // Show IP for 3 seconds

  // Setup web server routes
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    String html = "<html><body><h1>DHT22 Sensor Data</h1>";
    html += "<p>Temperature: " + String(temperature) + " &#8457;</p>";
    html += "<p>Humidity: " + String(humidity) + " %</p>";
    html += "</body></html>";
    request->send(200, "text/html", html);
  });
  server.begin();
  Serial.println("Web server started");

  // Show sensor data on OLED after connecting
  display.clearDisplay();
}

// Save WiFi credentials to SPIFFS
void saveConfigCallback () {
  Serial.println("WiFi Config Saved");
  File file = SPIFFS.open("/wificonfig.txt", FILE_WRITE);
  if (file) {
    file.println(WiFi.SSID());
    file.println(WiFi.psk());
    file.close();
    Serial.println("WiFi credentials saved to SPIFFS");
  } else {
    Serial.println("Failed to save WiFi credentials");
  }
}

void loop() {
  // Check if it's time to refresh the display and sensor data
  unsigned long currentMillis = millis();
  if (currentMillis - lastRefresh >= refreshInterval) {
    lastRefresh = currentMillis;

    // Read humidity and temperature from DHT22
    humidity = dht.readHumidity();
    temperature = dht.readTemperature(true);  // Read temperature in Fahrenheit

    // Check if readings are valid
    if (isnan(humidity) || isnan(temperature)) {
      Serial.println(F("Failed to read from DHT sensor!"));
      return;
    }

    // Update OLED display with sensor data
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0, 0);
    display.println("Sensor Data:");

    // Display temperature in Fahrenheit
    display.setCursor(0, 16);
    display.print("Temp: ");
    display.print(temperature);
    display.println(" F");

    // Display humidity
    display.setCursor(0, 32);
    display.print("Humidity: ");
    display.print(humidity);
    display.println(" %");

    // Display the IP Address
    display.setCursor(0, 48);
    display.print("IP: ");
    display.println(WiFi.localIP());

    // Render data on OLED
    display.display();
  }
}
